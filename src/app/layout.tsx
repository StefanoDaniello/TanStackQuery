"use client";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { useState } from "react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import { ReactQueryDevtoolsPanel } from "@tanstack/react-query-devtools";

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [queryClient] = useState(() => new QueryClient());
  const [isOpen, setIsOpen] = useState(false);

  return (
    <html lang="it">
      {/* suppressHydrationWarning : esso serve ad eliminare 
      il warnig di hydratation per next , che si verifica quando il contenuto 
      lato server e divero da quallo lato client */}
      <body
        suppressHydrationWarning
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <QueryClientProvider client={queryClient}>
          {children}
          <ReactQueryDevtools initialIsOpen={false} />
          {/* <button onClick={() => setIsOpen(!isOpen)}>{`${
            isOpen ? "Close" : "Open"
          } the devtools panel`}</button>
          {isOpen && (
            <ReactQueryDevtoolsPanel onClose={() => setIsOpen(false)} />
          )} */}
        </QueryClientProvider>
      </body>
    </html>
  );
}
